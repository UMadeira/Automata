//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Automata.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class AutomataLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, LETTER=3, NUMBER=4, IDENTIFIER=5, WHITESPACES=6;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "DIGIT", "LETTER", "NUMBER", "IDENTIFIER", "WHITESPACES"
	};


	public AutomataLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AutomataLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'automata'", "'state'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "LETTER", "NUMBER", "IDENTIFIER", "WHITESPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Automata.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AutomataLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,6,54,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,
		3,1,3,1,4,4,4,36,8,4,11,4,12,4,37,1,5,1,5,1,5,5,5,43,8,5,10,5,12,5,46,
		9,5,1,6,4,6,49,8,6,11,6,12,6,50,1,6,1,6,0,0,7,1,1,3,2,5,0,7,3,9,4,11,5,
		13,6,1,0,3,1,0,48,57,2,0,65,90,97,122,3,0,9,10,13,13,32,32,56,0,1,1,0,
		0,0,0,3,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,1,15,
		1,0,0,0,3,24,1,0,0,0,5,30,1,0,0,0,7,32,1,0,0,0,9,35,1,0,0,0,11,39,1,0,
		0,0,13,48,1,0,0,0,15,16,5,97,0,0,16,17,5,117,0,0,17,18,5,116,0,0,18,19,
		5,111,0,0,19,20,5,109,0,0,20,21,5,97,0,0,21,22,5,116,0,0,22,23,5,97,0,
		0,23,2,1,0,0,0,24,25,5,115,0,0,25,26,5,116,0,0,26,27,5,97,0,0,27,28,5,
		116,0,0,28,29,5,101,0,0,29,4,1,0,0,0,30,31,7,0,0,0,31,6,1,0,0,0,32,33,
		7,1,0,0,33,8,1,0,0,0,34,36,3,5,2,0,35,34,1,0,0,0,36,37,1,0,0,0,37,35,1,
		0,0,0,37,38,1,0,0,0,38,10,1,0,0,0,39,44,3,7,3,0,40,43,3,7,3,0,41,43,3,
		5,2,0,42,40,1,0,0,0,42,41,1,0,0,0,43,46,1,0,0,0,44,42,1,0,0,0,44,45,1,
		0,0,0,45,12,1,0,0,0,46,44,1,0,0,0,47,49,7,2,0,0,48,47,1,0,0,0,49,50,1,
		0,0,0,50,48,1,0,0,0,50,51,1,0,0,0,51,52,1,0,0,0,52,53,6,6,0,0,53,14,1,
		0,0,0,5,0,37,42,44,50,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
